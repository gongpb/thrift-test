/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.funshion.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Cookie implements org.apache.thrift.TBase<Cookie, Cookie._Fields>, java.io.Serializable, Cloneable, Comparable<Cookie> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Cookie");

  private static final org.apache.thrift.protocol.TField MICK_FIELD_DESC = new org.apache.thrift.protocol.TField("mick", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("domain", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("cookie", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CookieStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CookieTupleSchemeFactory());
  }

  public String mick; // required
  public String domain; // required
  public CookieDetail cookie; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MICK((short)1, "mick"),
    DOMAIN((short)2, "domain"),
    COOKIE((short)3, "cookie");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MICK
          return MICK;
        case 2: // DOMAIN
          return DOMAIN;
        case 3: // COOKIE
          return COOKIE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MICK, new org.apache.thrift.meta_data.FieldMetaData("mick", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("domain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COOKIE, new org.apache.thrift.meta_data.FieldMetaData("cookie", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CookieDetail.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Cookie.class, metaDataMap);
  }

  public Cookie() {
  }

  public Cookie(
    String mick,
    String domain,
    CookieDetail cookie)
  {
    this();
    this.mick = mick;
    this.domain = domain;
    this.cookie = cookie;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Cookie(Cookie other) {
    if (other.isSetMick()) {
      this.mick = other.mick;
    }
    if (other.isSetDomain()) {
      this.domain = other.domain;
    }
    if (other.isSetCookie()) {
      this.cookie = new CookieDetail(other.cookie);
    }
  }

  public Cookie deepCopy() {
    return new Cookie(this);
  }

  @Override
  public void clear() {
    this.mick = null;
    this.domain = null;
    this.cookie = null;
  }

  public String getMick() {
    return this.mick;
  }

  public Cookie setMick(String mick) {
    this.mick = mick;
    return this;
  }

  public void unsetMick() {
    this.mick = null;
  }

  /** Returns true if field mick is set (has been assigned a value) and false otherwise */
  public boolean isSetMick() {
    return this.mick != null;
  }

  public void setMickIsSet(boolean value) {
    if (!value) {
      this.mick = null;
    }
  }

  public String getDomain() {
    return this.domain;
  }

  public Cookie setDomain(String domain) {
    this.domain = domain;
    return this;
  }

  public void unsetDomain() {
    this.domain = null;
  }

  /** Returns true if field domain is set (has been assigned a value) and false otherwise */
  public boolean isSetDomain() {
    return this.domain != null;
  }

  public void setDomainIsSet(boolean value) {
    if (!value) {
      this.domain = null;
    }
  }

  public CookieDetail getCookie() {
    return this.cookie;
  }

  public Cookie setCookie(CookieDetail cookie) {
    this.cookie = cookie;
    return this;
  }

  public void unsetCookie() {
    this.cookie = null;
  }

  /** Returns true if field cookie is set (has been assigned a value) and false otherwise */
  public boolean isSetCookie() {
    return this.cookie != null;
  }

  public void setCookieIsSet(boolean value) {
    if (!value) {
      this.cookie = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MICK:
      if (value == null) {
        unsetMick();
      } else {
        setMick((String)value);
      }
      break;

    case DOMAIN:
      if (value == null) {
        unsetDomain();
      } else {
        setDomain((String)value);
      }
      break;

    case COOKIE:
      if (value == null) {
        unsetCookie();
      } else {
        setCookie((CookieDetail)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MICK:
      return getMick();

    case DOMAIN:
      return getDomain();

    case COOKIE:
      return getCookie();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MICK:
      return isSetMick();
    case DOMAIN:
      return isSetDomain();
    case COOKIE:
      return isSetCookie();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Cookie)
      return this.equals((Cookie)that);
    return false;
  }

  public boolean equals(Cookie that) {
    if (that == null)
      return false;

    boolean this_present_mick = true && this.isSetMick();
    boolean that_present_mick = true && that.isSetMick();
    if (this_present_mick || that_present_mick) {
      if (!(this_present_mick && that_present_mick))
        return false;
      if (!this.mick.equals(that.mick))
        return false;
    }

    boolean this_present_domain = true && this.isSetDomain();
    boolean that_present_domain = true && that.isSetDomain();
    if (this_present_domain || that_present_domain) {
      if (!(this_present_domain && that_present_domain))
        return false;
      if (!this.domain.equals(that.domain))
        return false;
    }

    boolean this_present_cookie = true && this.isSetCookie();
    boolean that_present_cookie = true && that.isSetCookie();
    if (this_present_cookie || that_present_cookie) {
      if (!(this_present_cookie && that_present_cookie))
        return false;
      if (!this.cookie.equals(that.cookie))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Cookie other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMick()).compareTo(other.isSetMick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mick, other.mick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDomain()).compareTo(other.isSetDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain, other.domain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCookie()).compareTo(other.isSetCookie());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCookie()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookie, other.cookie);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Cookie(");
    boolean first = true;

    sb.append("mick:");
    if (this.mick == null) {
      sb.append("null");
    } else {
      sb.append(this.mick);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("domain:");
    if (this.domain == null) {
      sb.append("null");
    } else {
      sb.append(this.domain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cookie:");
    if (this.cookie == null) {
      sb.append("null");
    } else {
      sb.append(this.cookie);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (mick == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mick' was not present! Struct: " + toString());
    }
    if (domain == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'domain' was not present! Struct: " + toString());
    }
    if (cookie == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cookie' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (cookie != null) {
      cookie.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CookieStandardSchemeFactory implements SchemeFactory {
    public CookieStandardScheme getScheme() {
      return new CookieStandardScheme();
    }
  }

  private static class CookieStandardScheme extends StandardScheme<Cookie> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Cookie struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mick = iprot.readString();
              struct.setMickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domain = iprot.readString();
              struct.setDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COOKIE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cookie = new CookieDetail();
              struct.cookie.read(iprot);
              struct.setCookieIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Cookie struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mick != null) {
        oprot.writeFieldBegin(MICK_FIELD_DESC);
        oprot.writeString(struct.mick);
        oprot.writeFieldEnd();
      }
      if (struct.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(struct.domain);
        oprot.writeFieldEnd();
      }
      if (struct.cookie != null) {
        oprot.writeFieldBegin(COOKIE_FIELD_DESC);
        struct.cookie.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CookieTupleSchemeFactory implements SchemeFactory {
    public CookieTupleScheme getScheme() {
      return new CookieTupleScheme();
    }
  }

  private static class CookieTupleScheme extends TupleScheme<Cookie> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Cookie struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.mick);
      oprot.writeString(struct.domain);
      struct.cookie.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Cookie struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.mick = iprot.readString();
      struct.setMickIsSet(true);
      struct.domain = iprot.readString();
      struct.setDomainIsSet(true);
      struct.cookie = new CookieDetail();
      struct.cookie.read(iprot);
      struct.setCookieIsSet(true);
    }
  }

}

